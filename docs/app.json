[{"name":"app.R","content":"#to update run in console\r\n#shinylive::export(appdir = \"app\", destdir = \"docs\")\r\n\r\n#in terminal:\r\n#git add docs\r\n#git commit -m \"Deploy updated Shiny app\"\r\n#git push\r\n\r\ninstall.packages(\"shinylive\")\r\nlibrary(shiny)\r\nlibrary(bslib)\r\nlibrary(plotly)\r\nlibrary(ggplot2)\r\n\r\n# --- Workaround for Shinylive munsell bug ---\r\nif (FALSE) {\r\n  library(munsell)\r\n  library(colorspace)\r\n}\r\n\r\n# =============================\r\n# Helper functions\r\n# =============================\r\n\r\n# Converts numeric risk to a readable \"1 in ...\" string\r\nrisk_text <- function(risk) {\r\n  if (risk < 1e-5) {\r\n    \"< 1 in 100,000\"\r\n  } else if (risk < 1e-4) {\r\n    inv <- round(1 / risk, -3)\r\n    paste0(\"≈ 1 in \", format(inv, big.mark = \",\"))\r\n  } else {\r\n    inv <- round(1 / risk, -2)\r\n    paste0(\"> 1 in \", format(inv, big.mark = \",\"))\r\n  }\r\n}\r\n\r\n# Create ring segments for colored bands\r\nmake_ring <- function(start, end, r_outer = 1, r_inner = 0.7, n = 100) {\r\n  theta_outer <- seq(start, end, length.out = n)\r\n  theta_inner <- rev(theta_outer)\r\n  data.frame(\r\n    x = c(r_outer * cos(theta_outer), r_inner * cos(theta_inner)),\r\n    y = c(r_outer * sin(theta_outer), r_inner * sin(theta_inner))\r\n  )\r\n}\r\n\r\n# --- Gauge helper (keeps median label under arcs) ----\r\nrender_custom_gauge <- function(value, title) {\r\n  value <- pmin(pmax(value, 0), 1e-3)\r\n  val_ratio <- value / 1e-3\r\n  angle <- pi * (1 - val_ratio)\r\n  \r\n  # new thresholds: green <1e-4, yellow 1e-4–5e-4, red >5e-4\r\n  green  <- make_ring(pi, pi*(1 - 1e-4/1e-3))\r\n  yellow <- make_ring(pi*(1 - 1e-4/1e-3), pi*(1 - 5e-4/1e-3))\r\n  red    <- make_ring(pi*(1 - 5e-4/1e-3), 0)\r\n  \r\n  if (value >= 1e-3) {\r\n    label_text <- \"Median risk: >1e-03\"\r\n  } else {\r\n    label_text <- sprintf(\"Median risk: %.1e (%s)\", value, risk_text(value))\r\n  }\r\n  \r\n  plot_ly() %>%\r\n    add_polygons(data = green,  x = ~x, y = ~y, fillcolor = \"#8fd19e\",\r\n                 line = list(color = \"transparent\"), showlegend = FALSE) %>%\r\n    add_polygons(data = yellow, x = ~x, y = ~y, fillcolor = \"#ffd480\",\r\n                 line = list(color = \"transparent\"), showlegend = FALSE) %>%\r\n    add_polygons(data = red,    x = ~x, y = ~y, fillcolor = \"#ff726f\",\r\n                 line = list(color = \"transparent\"), showlegend = FALSE) %>%\r\n    add_segments(x = 0, y = 0, xend = cos(angle)*0.9, yend = sin(angle)*0.9,\r\n                 line = list(color = \"black\", width = 3), showlegend = FALSE) %>%\r\n    add_markers(x = 0, y = 0, marker = list(color = \"black\", size = 6),\r\n                showlegend = FALSE) %>%\r\n    # median label below\r\n    add_annotations(x = 0, y = -0.22, text = label_text,\r\n                    showarrow = FALSE, font = list(size = 14)) %>%\r\n    layout(\r\n      title = list(text = title, y = 0.9, font = list(size = 16)),\r\n      xaxis = list(title = list(text = NULL), showticklabels = FALSE,\r\n                   zeroline = FALSE, showgrid = FALSE,\r\n                   range = c(-1.2, 1.2), automargin = TRUE),\r\n      yaxis = list(title = list(text = NULL), showticklabels = FALSE,\r\n                   zeroline = FALSE, showgrid = FALSE,\r\n                   range = c(-0.4, 1.2), automargin = TRUE),\r\n      margin = list(t = 40, b = 20, l = 0, r = 0)\r\n    )\r\n}\r\n\r\n# =============================\r\n# UI\r\n# =============================\r\nui <- fluidPage(\r\n  tags$head(\r\n    tags$style(HTML(\"\r\n      body { background-color: #e2e9eb; }\r\n      .input-row {\r\n        background-color: #0c234b; color: white;\r\n        padding: 15px; margin-bottom: 20px; border-radius: 5px;\r\n      }\r\n      .input-row label, .input-row .control-label, .input-row .shiny-input-container {\r\n        color: white !important;\r\n      }\r\n      .output-card {\r\n        background-color: white; padding: 20px; margin-bottom: 20px;\r\n        box-shadow: 0 0 10px rgba(0,0,0,0.1); border-radius: 8px;\r\n        word-wrap: break-word; white-space: normal;\r\n      }\r\n      table {\r\n        width: 100%; border-collapse: collapse; text-align: left;\r\n      }\r\n      th, td {\r\n        padding: 8px; border-bottom: 1px solid #ddd;\r\n      }\r\n      th { background-color: #f5f7f8; font-weight: bold; }\r\n    \"))\r\n  ),\r\n  \r\n  tabsetPanel(\r\n    tabPanel(\"Airborne Risk Model\",\r\n             div(class = \"input-row\",\r\n                 fluidRow(\r\n                   column(4,\r\n                          selectInput(\"room\", \"Room Dimensions:\",\r\n                                      choices = c(\r\n                                        \"10×10×8 ft (22.7 m³)\" = \"V_10x10x8\",\r\n                                        \"24×40×8 ft (217.5 m³)\" = \"V_24x40x8\",\r\n                                        \"60×30×25 ft (1274.3 m³)\" = \"V_60x30x25\"\r\n                                      )\r\n                          )\r\n                   ),\r\n                   column(4,\r\n                          selectInput(\"ach\", \"Air Exchange Rate (ACH):\",\r\n                                      choices = c(3, 6, 12), selected = 3)\r\n                   ),\r\n                   column(4,\r\n                          sliderInput(\"duration_hr\", \"Exposure Duration (hours):\",\r\n                                      min = 0.5, max = 4, value = 1, step = 0.5)\r\n                   )\r\n                 ),\r\n                 actionButton(\"go1\", \"Run Model\",\r\n                              class = \"btn btn-light\", style = \"margin-top: 10px;\")\r\n             ),\r\n             \r\n             # Risk summary\r\n             div(class = \"output-card\",\r\n                 h4(\"Risk Summary\"),\r\n                 htmlOutput(\"summary_txt\")\r\n             ),\r\n             \r\n             # Gauges row\r\n             fluidRow(\r\n               column(\r\n                 6,\r\n                 div(class = \"output-card\",\r\n                     plotlyOutput(\"gauge_H1N1\", height = \"280px\"))\r\n               ),\r\n               column(\r\n                 6,\r\n                 div(class = \"output-card\",\r\n                     plotlyOutput(\"gauge_COVID\", height = \"280px\"))\r\n               )\r\n             ),\r\n             \r\n             # Table\r\n             div(class = \"output-card\",\r\n                 h4(\"Estimated Infection Risk by Pathogen\"),\r\n                 tableOutput(\"risk_table\")\r\n             ),\r\n             \r\n             # Assumptions\r\n             div(class = \"output-card\",\r\n                 h4(\"Model Assumptions\"),\r\n                 htmlOutput(\"assumptions_txt\")\r\n             )\r\n    ),\r\n    \r\n    tabPanel(\"Surface Risk Model (Coming Soon)\",\r\n             div(class = \"output-card\",\r\n                 h4(\"Demo 2 Placeholder\"),\r\n                 p(\"This tab will contain a surface contamination QMRA demo.\"))\r\n    )\r\n  )\r\n)\r\n\r\n# =============================\r\n# Server\r\n# =============================\r\n# --- Server ----\r\nserver <- function(input, output, session) {\r\n  \r\n  co_occupy_baseline <- function(q, V, ACH, t, IR, i = 1) {\r\n    1 - exp(-(i * q * IR * t) / (V * ACH))\r\n  }\r\n  \r\n  # --- reactive model results ---\r\n  results <- eventReactive(input$go1, {\r\n    \r\n    iterations <- 10000\r\n    set.seed(103106)\r\n    IR <- pmax(rnorm(iterations, mean = 0.012, sd = 0.0025), 0) * 60\r\n    i <- 1\r\n    \r\n    # Room volumes (m³)\r\n    V <- switch(input$room,\r\n                \"V_10x10x8\" = 22.65,\r\n                \"V_24x40x8\" = 217.47,\r\n                \"V_60x30x25\" = 1274.25\r\n    )\r\n    ACH <- as.numeric(input$ach)\r\n    t <- input$duration_hr\r\n    \r\n    erq_function <- function(med, log10_sd) {\r\n      meanlog <- log(10) * log10(med)\r\n      sdlog   <- log(10) * log10_sd\r\n      rlnorm(n = iterations, meanlog = meanlog, sdlog = sdlog)\r\n    }\r\n    \r\n    q_H1N1  <- erq_function(3, 0.84)\r\n    q_covid <- erq_function(46, 1.2)\r\n    \r\n    H1N1_vals  <- co_occupy_baseline(q_H1N1,  V, ACH, t, IR)\r\n    COVID_vals <- co_occupy_baseline(q_covid, V, ACH, t, IR)\r\n    \r\n    list(\r\n      H1N1 = H1N1_vals,\r\n      COVID = COVID_vals,\r\n      med_inf = median(H1N1_vals),\r\n      med_cov = median(COVID_vals),\r\n      V = V, ACH = ACH, t = t\r\n    )\r\n  })\r\n  \r\n  # --- summary text ---\r\n  output$summary_txt <- renderText({\r\n    req(results())\r\n    dim_ft <- switch(input$room,\r\n                     \"V_10x10x8\" = c(10, 10, 8),\r\n                     \"V_24x40x8\" = c(24, 40, 8),\r\n                     \"V_60x30x25\" = c(60, 30, 25)\r\n    )\r\n    sprintf(\r\n      \"After spending <strong>%.1f hours<\/strong> in a <strong>%.0f ft × %.0f ft × %.0f ft room<\/strong> (≈ %.1f m³) shared with a contagious person under <strong>%s ACH<\/strong>, the <strong>median estimated infection risk<\/strong> is <strong>%.2f%%<\/strong> for Influenza (H1N1) and <strong>%.2f%%<\/strong> for COVID-19 (SARS-CoV-2).\",\r\n      results()$t, dim_ft[1], dim_ft[2], dim_ft[3],\r\n      results()$V, results()$ACH,\r\n      results()$med_inf * 100, results()$med_cov * 100\r\n    )\r\n  })\r\n  \r\n  # --- table ---\r\n  output$risk_table <- renderTable({\r\n    req(results())\r\n    data.frame(\r\n      Pathogen = c(\"Influenza (H1N1)\", \"COVID-19 (SARS-CoV-2)\"),\r\n      Min = formatC(c(min(results()$H1N1), min(results()$COVID)), format=\"e\", digits=2),\r\n      Median = formatC(c(results()$med_inf, results()$med_cov), format=\"e\", digits=2),\r\n      Max = formatC(c(max(results()$H1N1), max(results()$COVID)), format=\"e\", digits=2),\r\n      Mean = formatC(c(mean(results()$H1N1), mean(results()$COVID)), format=\"e\", digits=2)\r\n    )\r\n  }, striped = TRUE, bordered = TRUE)\r\n  \r\n  # --- gauges ---\r\n  observeEvent(results(), {\r\n    output$gauge_H1N1 <- renderPlotly({\r\n      render_custom_gauge(results()$med_inf, \"Influenza (H1N1)\")\r\n    })\r\n    output$gauge_COVID <- renderPlotly({\r\n      render_custom_gauge(results()$med_cov, \"COVID-19 (SARS-CoV-2)\")\r\n    })\r\n  })\r\n  \r\n  # --- assumptions ---\r\n  output$assumptions_txt <- renderUI({\r\n    HTML(\"\r\n      Infection risk calculated using the Wells-Riley equation under the following assumptions:\r\n      <ul>\r\n        <li>One contagious individual is present during the exposure period.<\/li>\r\n        <li>The room air is well-mixed (uniform quanta concentration).<\/li>\r\n        <li>Quanta generation remains constant throughout the exposure period.<\/li>\r\n        <li>Air removal is modeled solely by ventilation (based on ACH).<\/li>\r\n      <\/ul>\r\n      Room dimensions are converted from feet to cubic meters automatically.\r\n      <br><br>\r\n      The risk threshold used in this demo is based on a benchmark of \r\n      <strong>1 infection per 10,000 exposures<\/strong>. \r\n      For higher-risk or immunocompromised individuals, a more protective target of \r\n      <strong>1 infection per 100,000 exposures<\/strong> may be appropriate.\r\n    \")\r\n  })\r\n  # --- placeholder plots (so gauges show up immediately) ---\r\n  empty_gauge <- plot_ly() %>%\r\n    layout(\r\n      xaxis = list(showticklabels = FALSE, showgrid = FALSE, zeroline = FALSE, range = c(-1, 1)),\r\n      yaxis = list(showticklabels = FALSE, showgrid = FALSE, zeroline = FALSE, range = c(-0.5, 1)),\r\n      annotations = list(text = \"Click 'Run Model' to generate risk\", x = 0, y = 0, showarrow = FALSE)\r\n    )\r\n  \r\n  output$gauge_H1N1 <- renderPlotly(empty_gauge)\r\n  output$gauge_COVID <- renderPlotly(empty_gauge)\r\n}\r\n\r\nshinyApp(ui, server)\r\n","type":"text"}]
