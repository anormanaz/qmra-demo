[{"name":"app.R","content":"#to update run in console\r\n#shinylive::export(appdir = \"app\", destdir = \"docs\")\r\n\r\n#in terminal:\r\n#git add docs\r\n#git commit -m \"Deploy updated Shiny app\"\r\n#git push\r\n\r\nlibrary(shiny)\r\nlibrary(bslib)\r\ninstall.packages(\"shinylive\")   \r\nlibrary(shinylive)\r\nlibrary(truncdist)\r\nlibrary(tibble)\r\nlibrary(scales)\r\nlibrary(glue)\r\n\r\ninstall.packages(\"remotes\")\r\n\r\nremotes::install_version(\"gt\", version = \"0.11.1\")\r\n\r\nui <- fluidPage(\r\n  titlePanel(\"Airborne Infection Risk Calculator\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      selectInput(\"room\", \"Select Room Size:\",\r\n                  choices = c(\r\n                    \"Small Room (10×10×8 ft, ~22.6 m³)\" = 22.65,\r\n                    \"Medium Room (24×40×8 ft, ~217.5 m³)\" = 217.47,\r\n                    \"Large Room (60×30×25 ft, ~1274.3 m³)\" = 1274.25\r\n                  )),\r\n      selectInput(\"ach\", \"Select Air Exchange Rate (ACH):\",\r\n                  choices = c(\"3 ACH\" = 3, \"6 ACH\" = 6, \"12 ACH\" = 12)),\r\n      sliderInput(\"duration\", \"Time in Room (hours):\", min = 0.25, max = 4, value = 1, step = 0.25)\r\n    ),\r\n    mainPanel(\r\n      h4(\"Model Assumptions\"),\r\n      p(\"This calculator estimates airborne infection risk using the Wells-Riley equation. Assumptions include:\"),\r\n      tags$ul(\r\n        tags$li(\"One infectious individual present\"),\r\n        tags$li(\"Uniform mixing of air in the room\"),\r\n        tags$li(\"Constant pathogen emission rate over time\"),\r\n        tags$li(\"Ventilation modeled via selected ACH (Air Changes per Hour)\")\r\n      ),\r\n      h4(\"Risk Estimates\"),\r\n      textOutput(\"summary_txt\"),\r\n      br(),\r\n      gt_output(\"risk_table\")\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  iterations <- 10000\r\n  set.seed(103106)\r\n  \r\n  # Pulmonary ventilation (m³/h)\r\n  IR <- rtrunc(iterations, \"norm\", a = 0, b = Inf, mean = 0.012, sd = 0.0025) * 60\r\n  \r\n  i <- 1  # infectious person\r\n  \r\n  # Quanta emission function\r\n  erq_function <- function(med, log10_sd) {\r\n    meanlog <- log(10) * log10(med)\r\n    sdlog <- log(10) * log10_sd\r\n    rlnorm(n = iterations, meanlog = meanlog, sdlog = sdlog)\r\n  }\r\n  \r\n  q_H1N1 <- erq_function(med = 3, log10_sd = 0.84)\r\n  q_covid <- erq_function(med = 46, log10_sd = 1.2)\r\n  \r\n  # Wells-Riley function\r\n  co_occupy_baseline <- function(q, V, ACH, t){\r\n    1 - exp(-(i * q * IR * t) / (V * ACH))\r\n  }\r\n  \r\n  # Summary output (text)\r\n  output$summary_txt <- renderText({\r\n    V <- as.numeric(input$room)\r\n    ACH <- as.numeric(input$ach)\r\n    t <- input$duration\r\n    \r\n    H1N1_risk <- co_occupy_baseline(q_H1N1, V, ACH, t)\r\n    covid_risk <- co_occupy_baseline(q_covid, V, ACH, t)\r\n    \r\n    glue(\"After spending {t} hours in the selected room with one infectious person:\",\r\n         \"\\n• Influenza (H1N1): \", percent(mean(H1N1_risk), accuracy = 0.01),\r\n         \"\\n• Covid-19 (SARS-CoV-2): \", percent(mean(covid_risk), accuracy = 0.01))\r\n  })\r\n  \r\n  # GT Table\r\n  output$risk_table <- render_gt({\r\n    V <- as.numeric(input$room)\r\n    ACH <- as.numeric(input$ach)\r\n    t <- input$duration\r\n    \r\n    H1N1_risk <- co_occupy_baseline(q_H1N1, V, ACH, t)\r\n    covid_risk <- co_occupy_baseline(q_covid, V, ACH, t)\r\n    \r\n    table_data <- tibble(\r\n      Pathogen = c(\"Influenza (H1N1)\", \"Covid-19 (SARS-CoV-2)\"),\r\n      Min = c(min(H1N1_risk), min(covid_risk)),\r\n      Median = c(median(H1N1_risk), median(covid_risk)),\r\n      Max = c(max(H1N1_risk), max(covid_risk)),\r\n      Mean = c(mean(H1N1_risk), mean(covid_risk))\r\n    )\r\n    \r\n    table_data |>\r\n      gt() |>\r\n      tab_header(title = \"Estimated Infection Risk by Pathogen\") |>\r\n      fmt_scientific(\r\n        columns = c(Min, Median, Max, Mean),\r\n        decimals = 2,\r\n        exp_style = \"E\",\r\n        force_sign_n = TRUE\r\n      ) |>\r\n      sub_missing(columns = everything(), missing_text = \"\") |>\r\n      tab_style(\r\n        style = cell_text(weight = \"bold\"),\r\n        locations = cells_column_labels()\r\n      )\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)\r\nshinylive::export(appdir = \"app\", destdir = \"docs\")\r\n","type":"text"}]
